{"version":3,"sources":["config.js","actions/index.js","reducers/index.js","reducers/layers.js","LayerSelector.js","TownSelector.js","TransitMap.js","App.js","serviceWorker.js","index.js"],"names":["mapboxStyles","geographic","schematic","layers","id","mapboxLayers","name","selected","towns","center","zoom","toggleLayer","layer","type","combineReducers","state","arguments","length","undefined","action","map","Object","objectSpread","LayerSelector","props","useSelector","dispatch","useDispatch","react_default","a","createElement","className","_ref","key","htmlFor","concat","checked","onChange","TownSelector","react_select_browser_esm","option","value","options","town","label","placeholder","Map","ReactMapboxGl","accessToken","TransitMap","_useState","useState","_useState2","slicedToArray","setCenter","_useState3","_useState4","currentZoom","setCurrentZoom","_useState5","_useState6","setMap","_useState7","_useState8","setZoom","forEach","mapboxId","getLayer","setLayoutProperty","updateLayerVisibility","style","containerStyle","height","width","onStyleLoad","onZoomEnd","getZoom","lib_esm","TownSelector_TownSelector","_towns$filter$","filter","LayerSelector_LayerSelector","App","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c0e1469.chunk.js","sourcesContent":["export const mapboxAccessToken = 'pk.eyJ1IjoiZXJpY3J0ZSIsImEiOiJjanh5cmhvMTQwMnRuM21xczVrczlxMjN2In0.-b1kRpcWg52iFTcPFferTw';\nexport const mapboxStyles = {\n  geographic: 'mapbox://styles/ericrte/cjxyri6ya0x1s1cocb4py33do/draft',\n  schematic: 'mapbox://styles/ericrte/cjzoiwq1p2p6y1co14y4rd1kl/draft'\n}\n\nexport const layers = [\n  {\n    id: 'dial_a_ride',\n    mapboxLayers: ['dial_a_ride'],\n    name: 'Dial-a-Ride',\n    selected: true\n  },\n  {\n    id: 'fixed_route',\n    mapboxLayers: [\n      'kiryas-joel-routes-2orsdt',\n      'kiryas-joel-stops-2uc4i2',\n      'middletown-stops-diobrx',\n      'middletown-routes-b1slb4',\n      'newburgh-stops-3vbziu',\n      'newburgh-routes-1k2y17'\n    ],\n    name: 'Fixed Route',\n    selected: true\n  },\n  {\n    id: 'park_and_ride',\n    mapboxLayers: [],\n    name: 'Park and Ride',\n    selected: true\n  }\n];\n\nexport const towns = [\n  {\n    name: 'Newburgh',\n    center: [-74.022, 41.515],\n    zoom: [11.5]\n  },\n  {\n    name: 'Port Jervis',\n    center: [-74.679, 41.369],\n    zoom: [12.5]\n  }\n];\n","export const TOGGLE_LAYER = 'TOGGLE_LAYER';\n\nexport const toggleLayer = (layer, selected) => ({\n  type: TOGGLE_LAYER,\n  layer,\n  selected\n});\n","import { combineReducers } from 'redux';\nimport layers from './layers';\n\nexport default combineReducers({\n  layers\n});\n","import { layers } from '../config';\nimport * as actions from '../actions';\n\nexport default (state = layers, action) => {\n  switch (action.type) {\n    case actions.TOGGLE_LAYER:\n      return state.map(layer =>\n        (layer.id === action.layer)\n          ? { ...layer, selected: action.selected }\n          : layer\n      );\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { toggleLayer } from './actions';\nimport './LayerSelector.scss';\n\nexport default function LayerSelector(props) {\n  const layers = useSelector(state => state.layers);\n  const dispatch = useDispatch();\n\n  return (\n    <div className='LayerSelector'>\n      <ul>\n        {layers.map(({ id, name, selected }) => (\n          <li key={id}>\n            <label htmlFor={`check-${id}`}>\n              <input\n                id={`check-${id}`}\n                type='checkbox'\n                checked={selected}\n                onChange={() => dispatch(toggleLayer(id, !selected))}\n              />\n              {name}\n            </label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport Select from 'react-select';\n\nimport './TownSelector.scss';\n\nexport default function TownSelector({ onChange, towns }) {\n  return (\n    <div className='TownSelector'>\n      <Select\n        onChange={option => onChange(option.value)}\n        options={towns.map(town => ({ label: town, value: town }))}\n        placeholder='Select a town'\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactMapboxGl, { ZoomControl } from \"react-mapbox-gl\";\nimport { useSelector } from 'react-redux';\n\nimport { mapboxAccessToken, mapboxStyles, towns } from './config';\nimport LayerSelector from './LayerSelector';\nimport TownSelector from './TownSelector';\n\nconst Map = ReactMapboxGl({\n  accessToken: mapboxAccessToken\n});\n\nexport default function TransitMap(props) {\n  const [center, setCenter] = useState([-74.3389, 41.386]);\n  const [currentZoom, setCurrentZoom] = useState(10);\n  const [map, setMap] = useState(null);\n  const [zoom, setZoom] = useState([10]);\n  const layers = useSelector(state => state.layers);\n\n  function updateLayerVisibility(map, layers) {\n    layers.forEach(({ mapboxLayers, selected }) => {\n      mapboxLayers.forEach(mapboxId => {\n        if (map.getLayer(mapboxId)) {\n          map.setLayoutProperty(mapboxId, 'visibility', selected ? 'visible' : 'none');\n        }\n      });\n    });\n  }\n\n  if (map && layers) {\n    updateLayerVisibility(map, layers);\n  }\n\n  return (\n    <Map\n      // eslint-disable-next-line\n      style={currentZoom <= 11 ? mapboxStyles.schematic : mapboxStyles.geographic}\n      center={center}\n      containerStyle={{\n        height: \"100vh\",\n        width: \"100vw\"\n      }}\n      onStyleLoad={setMap}\n      onZoomEnd={map => setCurrentZoom(map.getZoom())}\n      zoom={zoom}\n    >\n\n      <ZoomControl />\n\n      <TownSelector\n        onChange={value => {\n          const { center, zoom } = towns.filter(town => town.name === value)[0];\n          setCenter(center);\n          setZoom(zoom);\n        }}\n        towns={towns.map(town => town.name)}\n      />\n\n      <LayerSelector />\n\n    </Map>\n  );\n}\n","import React from 'react';\nimport TransitMap from './TransitMap';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TransitMap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}