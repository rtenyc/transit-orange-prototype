{"version":3,"sources":["config.js","actions/index.js","reducers/time.js","reducers/index.js","reducers/layers.js","LayerSelector.js","TimeSelector.js","TownSelector.js","TransitMap.js","App.js","serviceWorker.js","index.js"],"names":["mapboxStyles","geographic","layers","id","mapboxLayers","name","selected","towns","center","zoom","setDayOfWeek","value","type","setTimeOfDay","toggleLayer","layer","DEFAULT_STATE","dayOfWeek","timeOfDay","combineReducers","state","arguments","length","undefined","action","map","_objectSpread","time","time_objectSpread","LayerSelector","props","useSelector","dispatch","useDispatch","react_default","a","createElement","className","_ref","key","htmlFor","concat","checked","onChange","TimeSelector","_useSelector","makeOption","day","label","Math","floor","parseInt","react_select_browser_esm","defaultValue","isSearchable","menuPlacement","option","options","commonName","moment","hours","minutes","format","formatTime","index_esm","axis","xmin","xmax","xstep","x","date","TownSelector","town","placeholder","Map","ReactMapboxGl","accessToken","TransitMap","_useState","useState","_useState2","Object","slicedToArray","setCenter","_useState3","_useState4","setMap","_useState5","_useState6","setZoom","forEach","_ref2","mapboxId","getLayer","setLayoutProperty","updateLayerVisibility","prefix","replace","toLowerCase","filter","setFilter","filterByTime","style","containerStyle","height","width","onStyleLoad","lib_esm","TownSelector_TownSelector","_towns$filter$","LayerSelector_LayerSelector","TimeSelector_TimeSelector","App","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.311a63cf.chunk.js","sourcesContent":["export const mapboxAccessToken = 'pk.eyJ1IjoiZXJpY3J0ZSIsImEiOiJjanh5cmhvMTQwMnRuM21xczVrczlxMjN2In0.-b1kRpcWg52iFTcPFferTw';\nexport const mapboxStyles = {\n  geographic: 'mapbox://styles/ericrte/ck1aunacn4u1o1cnmb6wm3lrj/draft',\n}\n\nexport const layers = [\n  {\n    id: 'dial_a_ride',\n    mapboxLayers: [\n      'dial-a-bus-geographic',\n      'dial-a-bus-diagram'\n    ],\n    name: 'Dial-a-Ride',\n    selected: true\n  },\n  {\n    id: 'fixed_route',\n    mapboxLayers: [\n      'fixed-routes-diagram',\n      'fixed-routes-geographic',\n    ],\n    name: 'Fixed Route',\n    selected: true\n  },\n  {\n    id: 'park_and_ride',\n    mapboxLayers: [],\n    name: 'Park and Ride',\n    selected: false\n  }\n];\n\nexport const towns = [\n  {\n    name: 'Newburgh',\n    center: [-74.022, 41.515],\n    zoom: [11.5]\n  },\n  {\n    name: 'Port Jervis',\n    center: [-74.679, 41.369],\n    zoom: [12.5]\n  }\n];\n","export const SET_DAY_OF_WEEK = 'SET_DAY_OF_WEEK';\nexport const SET_TIME_OF_DAY = 'SET_TIME_OF_DAY';\nexport const TOGGLE_LAYER = 'TOGGLE_LAYER';\n\nexport const setDayOfWeek = value => ({\n  type: SET_DAY_OF_WEEK,\n  value\n});\n\nexport const setTimeOfDay = value => ({\n  type: SET_TIME_OF_DAY,\n  value\n});\n\nexport const toggleLayer = (layer, selected) => ({\n  type: TOGGLE_LAYER,\n  layer,\n  selected\n});\n","import * as actions from '../actions';\n\nconst DEFAULT_STATE = {\n  dayOfWeek: 'Monday',\n  timeOfDay: '1200'\n};\n\nexport default (state = DEFAULT_STATE, action) => {\n  switch (action.type) {\n    case actions.SET_DAY_OF_WEEK:\n      return {\n        ...state,\n        dayOfWeek: action.value\n      };\n    case actions.SET_TIME_OF_DAY:\n      return {\n        ...state,\n        timeOfDay: action.value\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport layers from './layers';\nimport time from './time';\n\nexport default combineReducers({\n  layers,\n  time\n});\n","import { layers } from '../config';\nimport * as actions from '../actions';\n\nexport default (state = layers, action) => {\n  switch (action.type) {\n    case actions.TOGGLE_LAYER:\n      return state.map(layer =>\n        (layer.id === action.layer)\n          ? { ...layer, selected: action.selected }\n          : layer\n      );\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { toggleLayer } from './actions';\nimport './LayerSelector.scss';\n\nexport default function LayerSelector(props) {\n  const layers = useSelector(state => state.layers);\n  const dispatch = useDispatch();\n\n  return (\n    <div className='LayerSelector'>\n      <ul>\n        {layers.map(({ id, name, selected }) => (\n          <li key={id}>\n            <label htmlFor={`check-${id}`}>\n              <input\n                id={`check-${id}`}\n                type='checkbox'\n                checked={selected}\n                onChange={() => dispatch(toggleLayer(id, !selected))}\n              />\n              {name}\n            </label>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Select from 'react-select';\nimport Slider from 'react-input-slider';\nimport moment from 'moment';\n\nimport { setDayOfWeek, setTimeOfDay } from './actions';\nimport './TimeSelector.scss';\n\nexport default function TimeSelector(props) {\n  const { dayOfWeek, timeOfDay } = useSelector(state => state.time);\n  const dispatch = useDispatch();\n  const days = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday',\n  ];\n  const makeOption = (day) => ({ label: day, value: day });\n\n  const hour = Math.floor(parseInt(timeOfDay) / 100);\n  const minutes = (parseInt(timeOfDay) % 100) / 60.0;\n  const time = hour + minutes;\n\n  const formatTime = time => {\n    let commonName;\n    if (time === 0) commonName = 'midnight';\n    if (time === 12) commonName = 'noon';\n\n    const date = moment()\n      .hours(Math.floor(time))\n      .minutes(time % 1 ? (60 * (time % 1)) : 0);\n    return date.format('h:mm a') + (commonName ? ` (${commonName})` : '');\n  }\n\n  return (\n    <div className='TimeSelector'>\n      <div>Show services available:</div>\n      <div className='TimeSelector-inputs'>\n        <Select\n          className='day-of-week'\n          defaultValue={makeOption(dayOfWeek)}\n          isSearchable={false}\n          menuPlacement='auto'\n          onChange={option => dispatch(setDayOfWeek(option.value))}\n          options={days.map(makeOption)}\n        />\n\n        <div className='time-of-day'>\n          <div>At {formatTime(time)}</div>\n          <Slider\n            axis='x'\n            xmin={0}\n            xmax={24}\n            xstep={0.25}\n            onChange={({x}) => {\n              const date = moment()\n                .hours(Math.floor(x))\n                .minutes(x % 1 ? (60 * (x % 1)) : 0);\n              dispatch(setTimeOfDay(date.format('HHmm')));\n            }}\n            x={time}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Select from 'react-select';\n\nimport './TownSelector.scss';\n\nexport default function TownSelector({ onChange, towns }) {\n  return (\n    <div className='TownSelector'>\n      <Select\n        onChange={option => onChange(option.value)}\n        options={towns.map(town => ({ label: town, value: town }))}\n        placeholder='Select a town'\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactMapboxGl, { ZoomControl } from \"react-mapbox-gl\";\nimport { useSelector } from 'react-redux';\n\nimport { mapboxAccessToken, mapboxStyles, towns } from './config';\nimport LayerSelector from './LayerSelector';\nimport TimeSelector from './TimeSelector';\nimport TownSelector from './TownSelector';\n\nconst Map = ReactMapboxGl({\n  accessToken: mapboxAccessToken\n});\n\nexport default function TransitMap(props) {\n  const [center, setCenter] = useState([-74.3389, 41.386]);\n  const [map, setMap] = useState(null);\n  const [zoom, setZoom] = useState([10]);\n  const layers = useSelector(state => state.layers);\n  const { dayOfWeek, timeOfDay } = useSelector(state => state.time);\n\n  function filterByTime(map, layers, dayOfWeek, timeOfDay) {\n    layers.forEach(({ mapboxLayers }) => {\n      mapboxLayers.forEach(mapboxId => {\n        if (map.getLayer(mapboxId)) {\n          const prefix = dayOfWeek.replace('day', '').toLowerCase();\n          const filter = ['all',\n            ['<=', `${prefix}_min`, timeOfDay],\n            ['>=', `${prefix}_max`, timeOfDay]\n          ];\n          map.setFilter(mapboxId, filter);\n        }\n      });\n    });\n  }\n\n  function updateLayerVisibility(map, layers) {\n    layers.forEach(({ mapboxLayers, selected }) => {\n      mapboxLayers.forEach(mapboxId => {\n        if (map.getLayer(mapboxId)) {\n          map.setLayoutProperty(mapboxId, 'visibility', selected ? 'visible' : 'none');\n        }\n      });\n    });\n  }\n\n  if (map && layers) {\n    updateLayerVisibility(map, layers);\n  }\n\n  if (map && layers && dayOfWeek && timeOfDay) {\n    filterByTime(map, layers, dayOfWeek, timeOfDay);\n  }\n\n  return (\n    <Map\n      // eslint-disable-next-line\n      style={mapboxStyles.geographic}\n      center={center}\n      containerStyle={{\n        height: \"100vh\",\n        width: \"100vw\"\n      }}\n      onStyleLoad={setMap}\n      zoom={zoom}\n    >\n\n      <ZoomControl />\n\n      <TownSelector\n        onChange={value => {\n          const { center, zoom } = towns.filter(town => town.name === value)[0];\n          setCenter(center);\n          setZoom(zoom);\n        }}\n        towns={towns.map(town => town.name)}\n      />\n\n      <LayerSelector />\n      <TimeSelector />\n\n    </Map>\n  );\n}\n","import React from 'react';\nimport TransitMap from './TransitMap';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TransitMap />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}